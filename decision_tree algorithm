#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>


struct node
{
	int data;
	char name[15];
	struct node *next;
};

struct deci_tree
{
	double data;
	double ent;
        int pos;
	struct deci_tree *c[50];
}root;


struct node  *createnewnode(struct node *head,char name[15],int d)
{
	struct node *ptr=head,*temp;

	temp=(struct node *)malloc(sizeof(struct node));
	strcpy(temp->name,name);
	temp->data=d;
	temp->next=NULL;
	if(head==NULL)
		head=temp;

	else
	{
		while(ptr->next!=NULL)
		{
			ptr=ptr->next;
		}
		ptr->next=temp;
	}

	return head;
}


int search(struct node *head,char name[15])
{
	struct node *temp=head;
	while(temp!=NULL)
	{
		if(strcmp(temp->name,name)==0)
			return temp->data;
		else
			temp=temp->next;
	}

	if(temp==NULL)
		return 3;
}


void display(struct node *head)// function to display the mapping of name and integer
{
	struct node *temp=head;
	
	if(temp==NULL)
		return;
	while(temp!=NULL)
	{
		printf("%d->%s\n",temp->data,temp->name);
		temp=temp->next;
	}
}

/*
void display2(struct deci_tree *head)
{
        struct deci_tree *temp=head;
         
        if(temp==NULL)
            return;
        while(temp!=NULL)
       {
            printf("%d\n"temp->data);
            
}
*/

double entropy(int a[500][500],int obj,int attr,int attrpos,int val,struct deci_tree *head1)
{
	int x,k;
	x = a[1][attr-1];
	struct deci_tree *temp;
	temp = head1;
	int i;
	double b,c,d,total= 1.0;
	double count1 = 0,count2 = 0 ;

	if(temp == NULL && attrpos == attr-1)
	{
		for(i=1;i<obj;i++)
		{
			if(a[i][attrpos]==x)
				count1++;
			else
				count2++; 
		}
	}

	if(temp==NULL  && attrpos != attr-1)
	{

		for(i=1; i<obj; i++)
		{
			if(a[i][attrpos] == val)
			{
				if(a[i][attr-1] == x)      
					count1 = count1 + 1;

				else
					count2 = count2 + 1;
				// total = total+1;
			}
		}
	}
/*
	else if(temp != NULL)
	{ 
		temp = head1;
		i=1;

		while(i<obj)
		{   
			while(temp != NULL)
			{
				if(a[i][temp->pos] == temp->data)
					temp = temp->c[k]; // k is to be found
			
				else
				{
					i++;
					temp = head1;     
				}
			}

			if(a[i][attrpos] == val)
			{
				if(a[i][attr-1] == x)      
					count1 = count1 + 1; 
				
				else
					count2 = count2 + 1;
			}
			i++;
		}
	}
*/
	b = count1/(count1+count2);
       	c = count2/(count1+count2);

	printf("\n %f %f %f attr is %d  and attr pos is %d ",count1,count2,count1+count2 ,attr,attrpos);

	if(count1 == 0.000000 || count2 == 0.000000) 
		d = 0 ;
	else
		d =  ((count1+count2)/(obj-1)) *(-(b*(log(b)/log(2)) + c*(log(c)/log(2))));

	return d;
}

void findk(int a[500][500], int b[50][50],int obj,int attr){

	int i,j,k,count = 1;
	int flag  =0 ;   
        
        printf("\n Modifire B is\n");	
	for(k = 0; k < attr;k++)
	{ 
		b[k][1] = a[1][k];
		i = 1; 
		while(i < obj){
			for(j = 1 ; j < count; j++){
				if(a[i][k] == b[k][j]) 
				{
					flag = 1;     
				}
			}
			if(flag  == 0 ){
				b[k][count] = a[i][k];
				count++;
			}
			flag =0;
			i++;

		}
		b[k][0] = count-1;

		for(j=0 ; j <= count-1 ; j++){
			printf("%d \t",b[k][j]);

		}

		printf("\n");
		count = 1;
	}
//printf("test1");
}	


int findmax(double *gain1 , int attr){

	int i = 0 ;
	int max1 = 0 ;
	double max;
	max = gain1[0];
	for(i = 1; i <= attr; i++ ){
		if(gain1[i] > max){
			printf("\n inside find max1 gain1[%d] = %f",i , gain1[i]);		
			max1 = i;
			max = gain1[i];
		}
	}
	return max1;
}


double findsum(double col1[50],int len){

	int i,j;
	double sum =0;	
	for(i = 0;i < len ;i ++){
		sum =sum +col1[i];
		// printf("\n um is %f",sum );
	}         
	return sum;
}


int* funcModiA(int a[500][500],int modifiedA[500][500],int max1,int attr,int obj,int val,int dim[2]){

	int i,j,k;	
	int row = 0,col =0,temp=0;
	//	int dim[2];
	printf("\nModified A is \n");
	for(j = 0 ; j < obj ; j++){
		if(j == 0 ){
			for(k =0 ; k < attr ; ){
				if(k == max1){
					k++;
				}
				else{ 
					modifiedA[row][k] = a[j][k];
					printf("%d %d \t" , modifiedA[row][k],row);
					k++;
				}	
			}
			row++;
		}
		else{
			if(a[j][max1] == val){
				printf("\n");
				for(i = 0 ; i < attr ;){
					if(i == max1){
						i++;
					}	
					else { 				
						modifiedA[row][col] = a[j][i];
						printf("%d %d \t" , modifiedA[row][col],row,col);
						temp = col++;
						i++;
					}
				}	
				col = 0;		
				row++;
				printf("\n");
			}
		}		
	}
	dim[0] = row;
	dim[1] = attr-1;	
	return dim;
}

void infoGainRecursive(int a[500][500],int b[50][50],struct deci_tree * parent,double entr,int max1,int attr,int obj){

	int i =0 ;
	int j;
	int modifiedA[500][500],modifiedB[50][50];
	double col3[50],col1[50],entr1[50],entropy1[50][50],gain1[50];
	int dim[2];
	if(parent == NULL){
		struct deci_tree *temp = (struct deci_tree *)malloc(sizeof(struct deci_tree));
		temp->ent = entr;   
		parent = temp;
		for(i = 0 ; i  < attr ;i++){
			for(j = 0 ; j <  obj;j++){
				modifiedA[j][i] = a[j][i];
			}
		}	         
		findk(modifiedA,modifiedB,obj,attr);
		printf("\nInside Parent == NULL  Obj vaLue is %d, attr value is %d and max1 value is %d,  parent entropy %f " ,obj, attr,max1,parent->ent);

	}
	else if(obj == 2 || parent->ent == 0){
		for(i = 0 ; i  < attr ;i++){

			for(j = 0 ; j <  obj;j++){
				modifiedA[j][i] = a[j][i];

			}
		}

		printf("\n\ttermination with row value = %d , of parent %d with value %d \n",parent->pos , modifiedA[0][max1] , modifiedA[1][attr-1]);
		return ;
	}

	else{

		printf("\nObj vaLue is %d, attr value is %d and max1 value is %d,  parent entropy %f " ,obj, attr,max1,parent->ent);

		for(i = 0 ; i  < attr ;i++){

			for(j = 0 ; j <  obj;j++){
				modifiedA[j][i] = a[j][i];

			}
		}
		printf("\nbefore funcMidiA attr = %d and obj  = %d",attr,obj);
		funcModiA(a,modifiedA,max1,attr,obj,parent->pos,dim);
		obj = dim[0];
		attr = dim[1];
		parent->ent = entropy(modifiedA,obj,attr,i,modifiedB[i][j],NULL);
			 
		printf("\nbefore findk attr = %d and obj  = %d",attr,obj);
		findk(modifiedA,modifiedB,obj,attr); 		    	
	}


	for(i= 0; i < attr-1 ; i++){
		for(j= 1 ; j <= modifiedB[i][0]; j++){	
			col3[j-1] = entropy(modifiedA,obj,attr,i,modifiedB[i][j],NULL);
			printf("\nentropy values of %d are : %f ", modifiedB[i][j],col3[j-1]);
			entropy1[i][j-1] = col3[j-1];
		}
		entr1[i] =  findsum(col3,modifiedB[i][0]);
		gain1[i] =  parent->ent  - entr1[i];
		printf("\n\nGain of attr %d is %f\n" , i , gain1[i]);	 
	}
	int temp = max1;
	max1 = findmax(gain1,attr-1); 
	printf("\n\tCurrent parent is %d and is child of %d , through  row value %d \n", modifiedA[0][max1],a[0][temp],parent->pos) ;
	printf("\nmax1 Value is : %d",max1);
	for(i = 1; i <= modifiedB[max1][0] ;i++) {
		parent->c[i] = (struct deci_tree *)malloc(sizeof(struct deci_tree ));    
		parent->c[i]->pos = modifiedB[max1][i];           
		//parent->c[i]->data = ;

		parent->c[i]->ent = entropy1[max1][i-1];
		infoGainRecursive(modifiedA,modifiedB,parent->c[i],parent->c[i]->ent,max1,attr,obj);

	}

}


void main()
{     
	struct node *first;
	first = NULL;
	struct deci_tree *head = NULL;
	int i,j,k,t; 	    
	int a[500][500],obj,attr,x;
	FILE *fp;
	char *tok;    
	const char s[2]=",";

	char buff[200];

	fp=fopen("golf.data","r");


	k=4;i=0;

	while(fgets(buff,200,fp)!=NULL)
	{
		j=0;
		tok=strtok(buff,s);
		while(tok != NULL)
		{
			t=search(first,tok);
			if(t!=3)
			{
				a[i][j]=t;
				j++;
			}       
			if(t==3)// this value is understood if it is checked in search method
			{
				first= createnewnode(first,tok,k);
				a[i][j]=k;
				j++;
				k++;
			}
			tok=strtok(NULL,s);
		}

		i++;
		attr=j;
	}
	obj=i;
	display(first);
 	
	
        fclose(fp);
	int *d;
	d = (int *)malloc(attr * sizeof(int));
	for(k = 0 ; k < attr ; k++){
		d[k] = k;   
	} 
	for(i=0;i<obj;i++)
	{
		printf("\n");
		for(j=0;j<attr;j++)
		{
			printf("%d\t", a[i][j]);
		}
	}

	double r;

	double database;
		     
//        infoGainRecursive(modifiedA,ModifiedB,parent->c[i]->data,max1,attr-1,obj);

	database =  entropy(a , obj,attr, attr-1,0,NULL);
	
	  struct deci_tree *parent = (struct deci_tree *)malloc(sizeof(struct deci_tree));
            parent = NULL;
//infoGainRecursive(int a[500][500],int b[50][50],struct deci_tree * parent,double entr,int max1,int attr,int obj){

 	infoGainRecursive(a,NULL,parent,database,attr,attr,obj);

//	display(parent);		
//	printf("\n %f disorderness in the data \n",r);
}

