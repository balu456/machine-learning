#include<stdio.h>
#include<stdlib.h>
#include<math.h>

#define MAXIMUM 15
#define MAXRATING 5
#define no_of_iterations 100000


void matfact(int p, int q,int k, double **R,double **P,double **Q)
{

    int a,i,j,c,d, iter;
    double eij,N[p][q],temp,b,total,alpha,beta; 

    iter=0;total=0,alpha=0.0002,beta=0.02;

    while( iter < no_of_iterations ) {

        for ( i = 0; i < p; i++ ) {
	    for( j = 0; j < q; j++ ) {
	        for( a = 0; a < k; a++ ) {
		    total = total + ( P[i][a] * Q[a][j] );
	        }
	    N[i][j] = total;
            total = 0;
	    }
        }
   
        for ( i = 0; i < p; i++ ) {
	    for( j = 0; j < q; j++ ) {
	        {
	            if(R[i][j]>0){
                    eij = (R[i][j] - N[i][j]);
		
		    for ( a = 0; a < k; a++ ) {
		        P[i][a] = P[i][a] + alpha * ( ( 2.0 * eij * Q[a][j] ) - ( beta * P[i][a] ) );
		        Q[a][j] = Q[a][j] + alpha * ( ( 2.0 * eij * P[i][a] ) - ( beta * Q[a][j] ) );
		    }
	        }
	    }
        }
	
        total = 0;
        for ( i = 0; i < p; i++ ) {
	    for( j = 0; j < q; j++ ) {
	        for( a= 0; a < k; a++ ) {
		    total = total + ( P[i][a] * Q[a][j] );
	        }
	    N[i][j] = total;
            total = 0;
	    }
        } 

        b = 0;
        for ( i = 0; i < p; i++ ) {
	    for( j = 0; j < q; j++ ) {
	        if ( R[i][j] > 0 ) {
		    temp = R[i][j] - N[i][j];
		    b = b + ( temp * temp );
		    for ( a = 0; a < k; a++ ) {
		        b = b + ( beta / 2.0 ) * ( ( P[i][a] * P[i][a] ) + ( Q[a][j] * Q[a][j] ) );
		    }
	        }
	    }
        }
        if ( b < 0.001) {
	    break;
        }
	iter++;
    }
}
	for ( i = 0; i < p; i++ ) {
	    for( j = 0; j < q; j++ ) {
		if ( N[i][j]==0 ) {
		    N[i][j] = 2.00;
	   	}
		if ( N[i][j] >5 ) {
                    while(N[i][j]>5)
		    N[i][j] =N[i][j]- 1;
	   	}
	    }
        } 

	printf("\nfinal R MATRIX  is ");
	
         for ( i = 0; i < p; i++ ) {
               printf("\n");
	for ( j = 0; j < q; j++ ){
          
            printf("%f\t",N[i][j]);
        }
  
}
}


void main()
{
 
 int i,j,p,q,k,l;

 srand(time(NULL));

 
 p=rand()%MAXIMUM;
 q=rand()%MAXIMUM;

 while(p==0 || q==0)
{
 p=rand()%MAXIMUM;
 q=rand()%MAXIMUM;
} 
  
   k=p<q?p:q;


  printf("p is : %d,q is :%d, k is :%d",p,q,k);

  double **P,**Q,**R;

  // R IS OF DIMENSIONS R[p][q]  P is of dimensions P[p][k]  Q IS OF DIMENSIONS Q[k][q] 

  R=malloc(p*sizeof(double *));

  for(i=0;i<p;i++)
  R[i]=malloc(q*sizeof(double *));

  P=malloc(p*sizeof(double *));

  for(i=0;i<p;i++)
  P[i]=malloc(k*sizeof(double *));


  Q=malloc(k*sizeof(double *));

  for(i=0;i<k;i++)
  Q[i]=malloc(q*sizeof(double *));

  printf("\nR MATRIX is \n");

  for(i=0;i<p;i++)
 {
  printf("\n");
  for(j=0;j<q;j++)
  {
    R[i][j]=rand()%MAXRATING;
    printf("%f\t",R[i][j]);
  }
}


  //printf("P MATRIX is \n");
  
for(i=0;i<p;i++)
{
  //printf("\n");
 for(j=0;j<k;j++)
  {
    P[i][j]=rand()%MAXRATING;
    //printf("%f\t",P[i][j]);
  }
}

  
  //printf("Q MATRIX is \n");
  for(i=0;i<k;i++)
{
  // printf("\n");
  for(j=0;j<q;j++)
  {
    Q[i][j]=rand()%MAXRATING;
    //printf("%f\t",Q[i][j]);
  }
}


matfact(p,q,k,R,P,Q);

}

